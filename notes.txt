import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { Box, Center, Container, Flex, SimpleGrid, Stack, Text } from '@chakra-ui/react';
import { useLocation, useNavigate } from 'react-router-dom';
import { SelectPicker } from 'rsuite';
import { EmptyState } from '@productize/dashboard';
import Card from './cards/Card';
import { SharedButton } from '@productize/ui';
import { useSelector } from 'react-redux';
import { selectTags } from '@productize/redux';

const BASE_URL = import.meta.env.VITE_BASE_URL;

export interface slideProps {
    title: string;
}

export const ExploreFeatures = ({ title }: slideProps) => {
    const tags = useSelector(selectTags);
    const [products, setProducts] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const location = useLocation();
    const navigate = useNavigate();
    const queryParams = new URLSearchParams(location.search);
    const tag = queryParams.get('tag');

    const tagData = [`All`, ...tags]?.map((item: string) => ({
        label: item,
        value: item,
    }));

    const fetchData = useCallback(async () => {
        setIsLoading(true);
        try {
            const res = await axios.get(`${BASE_URL}/products?page=${currentPage}`);
            setProducts(res.data.data);
            setTotalPages(res.data.meta.last_page);
            setIsLoading(false);
        } catch (error: any) {
            setError(error);
            setIsLoading(false);
        }
    }, [currentPage]);

     const handleTagFilter = (tag: string) => {
         if (tag === `All`) {
             navigate(`/explore`);
         } else {
             navigate(`/explore?tag=${tag.toLowerCase()}`);
         }
         console.log(tag);
     };

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    const handlePrevButton = () => {
        setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
    };

    const handleNextButton = () => {
        setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));
    };

    const renderCards = products.map((product: any) => (
        <Card
            key={product.slug}
            productID={product.slug}
            image={product.thumbnail}
            heading={product.title}
            price={product.price}
            publisher={product.publisher}
        />
    ));

    return (
        <Flex>
            <Container p={0} maxW={`70rem`}>
                <Flex mb={5} justifyContent={`space-between`} alignItems={`center`}>
                    <Text as={`h4`}>{title}</Text>
                    <Box display={{ lg: `none` }}>
                        <SelectPicker searchable={false} onSelect={handleTagFilter} style={{ width: `100%` }} placeholder={`Tags`} size="sm" data={tagData} />
                    </Box>
                </Flex>

                <SimpleGrid columns={{ base: 1, sm: 2, md: 3, lg: 4 }} justifyContent={`space-between`} gap={`1.64rem`}>
                    {isLoading ? <Center p={10}>{/* Loading spinner */}</Center> : renderCards}
                </SimpleGrid>
                {!products.length && (
                    <EmptyState
                        content={{
                            title: `No content in ${tag} tag`,
                            desc: '',
                            img: undefined,
                        }}
                        textAlign={{ base: `center` }}
                        showImage={false}
                    />
                )}
                <Flex mt={4} gap={5} color={`grey.400`} alignItems={`center`} justifyContent={`space-between`} flexDir={{ base: `column-reverse`, lg: `row` }}>
                    <Flex alignItems={`center`} justifyContent={`space-between`} flexDir={{ base: `column`, lg: `row` }} gap={{ lg: 60 }}>
                        <Box>
                            <Text>10 Entries per page </Text>
                        </Box>
                        <Box>
                            <Text>
                                Page {currentPage} of {totalPages}
                            </Text>
                        </Box>
                    </Flex>
                    <Stack w={{ base: `100%`, lg: `initial` }} justifyContent={`space-between`} direction={`row`}>
                        <SharedButton
                            btnExtras={{
                                leftIcon: `material-symbols:chevron-left`,
                                border: `1px solid #CFCFD0`,
                                onClick: handlePrevButton,
                                disabled: currentPage === 1,
                            }}
                            text={'Previous'}
                            width={'137px'}
                            height={'40px'}
                            bgColor={'transparent'}
                            textColor={'grey.400'}
                            borderRadius={'4px'}
                            fontSize={{ base: `sm`, md: `md` }}
                        />
                        <SharedButton
                            btnExtras={{
                                leftIcon: `material-symbols:chevron-right`,
                                border: `1px solid #CFCFD0`,
                                onClick: handleNextButton,
                                disabled: currentPage === totalPages,
                            }}
                            text={'Next'}
                            width={'137px'}
                            height={'40px'}
                            bgColor={'transparent'}
                            textColor={'grey.400'}
                            borderRadius={'4px'}
                            fontSize={{ base: `sm`, md: `md` }}
                        />
                    </Stack>
                </Flex>
            </Container>
        </Flex>
    );
};
